# Facts: The knowledge base containing information about facts
facts = {
    'a': True,
    'b': True,
    'c': False
}

# Rules: Each rule is a tuple (conclusion, conditions)
rules = [
    ('d', ['a', 'b']),  # d can be concluded if a and b are true
    ('e', ['b', 'c']),  # e can be concluded if b and c are true
    ('f', ['d', 'e'])   # f can be concluded if d and e are true
]

# Backward Chaining Function
def backward_chaining(goal, facts, rules):
    # Check if the goal is already a known fact
    if goal in facts:
        return facts[goal]
    
    # Try to infer the goal using the rules
    for head, body in rules:
        if head == goal:
            # Check if all conditions in the body can be proved
            if all(backward_chaining(subgoal, facts, rules) for subgoal in body):
                return True

    # Goal cannot be achieved
    return False

# Example Tests
goals = ['f', 'e', 'd']
for goal in goals:
    if backward_chaining(goal, facts, rules):
        print(f"The goal '{goal}' can be achieved.")
    else:
        print(f"The goal '{goal}' cannot be achieved.")

